Exceptions provided by the pickle module :

exception pickle.PickleError
This exception inherits Exception. It is the base class for all other exceptions raised in pickling.
exception pickle.PicklingError
This exception inherits PickleError. This exception is raised when an unpicklable object is encountered by Pickler.
exception pickle.UnpicklingError
This exception inherits PickleError. This exception is raised when there is a problem like data corruption or a security violation while unpickling an object.
Classes exported by the pickle module:

class pickle.Pickler(file, protocol = None, *, fix_imports = True)
This class takes a binary file for writing a pickle data stream.
dump(obj) – This function is used to write a pickled representation of obj to the open file object given in the constructor.
persistent_id(obj) – If persistent_id() returns None, obj is pickled as usual. This does nothing by deafult and exists so that any subclass can override it.
Dispatch_table – A pickler object’s dispatch table is a mapping whose keys are classes and whose values are reduction functions.
By default, a pickler object will not have a dispatch_table attribute, and it will instead use the global dispatch table managed by the copyreg module.
Example : The below code creates an instance of pickle.Pickler with a private dispatch table which handles the SomeClass class specially.

f = io.BytesIO()
p = pickle.Pickler(f)
p.dispatch_table = copyreg.dispatch_table.copy()
p.dispatch_table[SomeClass] = reduce_SomeClass

Fast – The fast mode disables the usage of memo and speeds up the pickling process by not generating superfluous PUT opcodes.
class pickle.Unpickler(file, *, fix_imports = True, encoding = “ASCII”, errors = “strict”)

This class takes a binary file for reading a pickle data stream.
load() – This function is used to read a pickled object representation from the open file object file and return the reconstituted object hierarchy specified.
persistent_load(pid) – This raises an UnpicklingError by default.
find_class(module, name) – This function imports module if required and returns the object called name from it, where the module and name arguments are str objects.
What can be pickled and unpickled?
The following types can be pickled :

None, True, and False
integers, floating point numbers, complex numbers
strings, bytes, bytearrays
tuples, lists, sets, and dictionaries containing only picklable objects
functions defined at the top level of a module (using def, not lambda)
built-in functions defined at the top level of a module
classes that are defined at the top level of a module
instances of such classes whose __dict__ or the result of calling __getstate__() is picklable
Pickling Class Instances : 
This section explains the general mechanisms available to define, customize, and control how class instances are pickled and unpickled.
No additional code is needed to make instances picklable. By default, pickle will retrieve the class and the attributes of an instance via introspection.

Classes can alter the default behaviour by providing one or several special methods :

object.__getnewargs_ex__() 
This method dictates the values passed to the __new__() method upon unpickling. The method must return a pair (args, kwargs) where args is a tuple of positional arguments and kwargs a dictionary of named arguments for constructing the object.
object.__getnewargs__()
This method supports only positive arguments. It must return a tuple of arguments args which will be passed to the __new__() method upon unpickling.
object.__getstate__()
If this method is defined by classes, it is called and the returned object is pickled as the contents for the instance, instead of the contents of the instance’s dictionary.
object.__setstate__(state)
If this method is defined by classes, it is called with the unpickled state. The pickled state must be a dictionary and its items are assigned to the new instance’s dictionary.
object.__reduce__()
The __reduce__() method takes no argument and shall return either a string or preferably a tuple.
object.__reduce_ex__(protocol)
This method is similar to __reduce__ method. It takes a single integer argument. The main use for this method is to provide backwards-compatible reduce values for older Python releases.
Example : Handling Stateful Objects
This example shows how to modify pickling behavior for a class. The TextReader class opens a text file, and returns the line number and line contents each time its readline() method is called.

If a TextReader instance is pickled, all attributes except the file object member are saved.
When the instance is unpickled, the file is reopened, and reading resumes from the last location.